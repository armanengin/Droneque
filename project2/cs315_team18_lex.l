%{
#include <stdio.h>
#include "y.tab.h"
void yyerror(char *);
%}
NEWLINE (\r\n|\r|\n)
IDENTIFIER [A-Za-z][_A-Za-z0-9]*
LB \{
RB \}
LP \(
RP \)
COMMA \,
END_STATEMENT \;
SINGLE_COMMENT_LINE \#.*
MULTIPLE_COMMENT_LINE \#\*(.|\n)*\*\#
ASSIGN_OP \=
ADDITION_OP \+
SUBTRACTION_OP \-
MULTIPLICATION_OP \*
DIVISION_OP \/
MODULO_OP \%
INCREMENT_OP \+\+
DECREMENT_OP \-\-
EXPONENTIATION_OP \*\* 
ADDITION_ASSIGNMENT_OP \+\=
SUBTRACTION_ASSIGNMENT_OP \-\=
DIVISION_ASSIGNMENT_OP \/\=
MULTIPLICATION_ASSIGNMENT_OP \*\=
EQUAL_OP \=\=
NOT_EQUAL_OP \!\=
LESS_THAN_OP \<
GREATER_THAN_OP \>
GREATER_OR_EQUAL_OP \>\=
LESS_OR_EQUAL_OP \<\=
INTEGER [+-]?[0-9]+
DOUBLE [+-]?([0-9]*[.])?[0-9]+
BOOLEAN true|false
STRING \"(\\.|[^\\"])*\"
LOGICAL_OR_OP or
LOGICAL_AND_OP and
IF if
ELSE else
VAR_TYPE var
INT_TYPE int
DOUBLE_TYPE double
BOOLEAN_TYPE bool
STRING_TYPE string
VOID_TYPE void 
WHILE while
FOR for
RETURN return
FUNCTION function
MAIN main
EMPTY empty
READ_HEADING droneque\.read_heading
READ_ALTITUDE droneque\.read_altitude
READ_TEMPERATURE droneque\.read_temperature
VERTICALLY_CLIMB_UP droneque\.vertically_climb_up
VERTICALLY_DROP_DOWN droneque\.vertically_drop_down
VERTICALLY_STOP droneque\.vertically_stop
HORIZONTALLY_MOVE_FORWARD droneque\.horizontally_move_forward
HORIZONTALLY_MOVE_BACKWARD droneque\.horizontally_move_backward
HORIZONTALLY_MOVE_TOWARDS droneque\.horizontally_move_towards
HORIZONTALLY_MOVE_STOP droneque\.horizontally_stop
TURN_LEFT droneque\.turn_left
TURN_RIGHT droneque\.turn_right
SPRAY_ON droneque\.spray_on
SPRAY_OFF droneque\.spray_off
CONNECT_WITH_COMPUTER droneque\.connect_with_computer
CONNECT_WITH_MOBILE_DEVICE droneque\.connect_with_mobile_device
INPUT droneque\.input
EXIT droneque\.exit
PRINT droneque\.print

%option yylineno
%%
{MAIN} return MAIN;
{EMPTY} return EMPTY;
{LB} return LB;
{RB} return RB;
{LP} return LP;
{RP} return RP;
{COMMA} return COMMA;
{VAR_TYPE} return VAR_TYPE ;
{END_STATEMENT} return END_STATEMENT;
{SINGLE_COMMENT_LINE} return SINGLE_COMMENT_LINE;
{MULTIPLE_COMMENT_LINE} return MULTIPLE_COMMENT_LINE;
{EXPONENTIATION_OP} return EXPONENTIATION_OP;
{ADDITION_ASSIGNMENT_OP} return ADDITION_ASSIGNMENT_OP;
{SUBTRACTION_ASSIGNMENT_OP} return SUBTRACTION_ASSIGNMENT_OP;
{DIVISION_ASSIGNMENT_OP} return DIVISION_ASSIGNMENT_OP;
{EQUAL_OP} return EQUAL_OP;
{NOT_EQUAL_OP} return NOT_EQUAL_OP;
{LESS_THAN_OP} return LESS_THAN_OP;
{GREATER_THAN_OP} return GREATER_THAN_OP;
{GREATER_OR_EQUAL_OP} return GREATER_OR_EQUAL_OP;
{LESS_OR_EQUAL_OP} return LESS_OR_EQUAL_OP;
{ASSIGN_OP} return ASSIGN_OP;
{ADDITION_OP} return ADDITION_OP;
{SUBTRACTION_OP} return SUBTRACTION_OP;
{MULTIPLICATION_ASSIGNMENT_OP} return MULTIPLICATION_ASSIGNMENT_OP;
{MULTIPLICATION_OP} return MULTIPLICATION_OP;
{DIVISION_OP} return DIVISION_OP;
{MODULO_OP} return MODULO_OP;
{INCREMENT_OP} return INCREMENT_OP;
{DECREMENT_OP} return DECREMENT_OP;
{INTEGER} return INTEGER;
{DOUBLE} return DOUBLE;
{BOOLEAN} return BOOLEAN;
{STRING} return STRING;
{LOGICAL_OR_OP} return LOGICAL_OR_OP; 
{LOGICAL_AND_OP} return LOGICAL_AND_OP;
{IF} return IF;
{ELSE} return ELSE;
{ELSE}{IF} return ELSE_IF;
{DOUBLE_TYPE} return DOUBLE_TYPE;
{INT_TYPE} return INT_TYPE;
{STRING_TYPE} return STRING_TYPE;
{BOOLEAN_TYPE} return BOOLEAN_TYPE;
{WHILE} return WHILE;
{FOR} return FOR;
{RETURN} return RETURN;
{FUNCTION} return FUNCTION;
{READ_HEADING} return READ_HEADING;
{READ_ALTITUDE} return READ_ALTITUDE;
{READ_TEMPERATURE} return READ_TEMPERATURE;
{VERTICALLY_CLIMB_UP} return VERTICALLY_CLIMB_UP;
{VERTICALLY_DROP_DOWN} return VERTICALLY_DROP_DOWN;
{VERTICALLY_STOP} return VERTICALLY_STOP;
{HORIZONTALLY_MOVE_FORWARD} return HORIZONTALLY_MOVE_FORWARD; 
{HORIZONTALLY_MOVE_BACKWARD} return HORIZONTALLY_MOVE_BACKWARD;
{HORIZONTALLY_MOVE_TOWARDS} return HORIZONTALLY_MOVE_TOWARDS;
{HORIZONTALLY_MOVE_STOP} return HORIZONTALLY_MOVE_STOP;
{TURN_LEFT} return TURN_LEFT;
{TURN_RIGHT} return TURN_RIGHT;
{SPRAY_ON} return SPRAY_ON;
{SPRAY_OFF} return SPRAY_OFF;
{CONNECT_WITH_COMPUTER} return CONNECT_WITH_COMPUTER;
{CONNECT_WITH_MOBILE_DEVICE} return CONNECT_WITH_MOBILE_DEVICE;
{INPUT} return INPUT; 
{PRINT} return PRINT;
{EXIT} return EXIT;
{IDENTIFIER} return IDENTIFIER;
{NEWLINE} return NEWLINE;
[ \t]*;
%%

int yywrap(void){
    return 1;
}